***COMPARABLE***

A comparable object is capable of comparing itself with another object. 

The class itself must implements the java.lang.Comparable interface to compare its instances. 
Consider a Movie class that has members like, rating, name, year. 

Suppose we wish to sort a list of Movies based on year of release. 
We can implement the Comparable interface with the Movie class, and we override the method compareTo() of Comparable interface. 

***COMPARATOR***
Unlike Comparable, Comparator is external to the element type we are comparing. 
Itâ€™s a separate class. We create multiple separate classes (that implement Comparator) to compare by different members.
Collections class has a second sort() method and it takes Comparator. The sort() method invokes the compare() to sort objects.

To compare movies by Rating, we need to do 3 things:

Create a class that implements Comparator (and thus the compare() method that does the work previously done by compareTo()).
Make an instance of the Comparator class.
Call the overloaded sort() method, giving it both the list and the instance of the class that implements Comparator.


*****************************

Use Comparable if you want to define a default (natural) ordering behaviour of the object in question, a common practice is to use a technical or natural (database?) identifier of the object for this.

Use Comparator if you want to define an external controllable ordering behaviour, this can override the default ordering behaviour.

*****************************

